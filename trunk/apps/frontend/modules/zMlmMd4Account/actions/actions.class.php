<?php
// auto-generated by sfPropelCrud
// date: 2012/05/17 13:43:36
?>
<?php

/**
 * zMlmMd4Account actions.
 *
 * @package    sf_sandbox
 * @subpackage zMlmMd4Account
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class zMlmMd4AccountActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('zMlmMd4Account', 'list');
  }

  public function executeList()
  {
    $this->mlm_md4_accounts = MlmMd4AccountPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->mlm_md4_account = MlmMd4AccountPeer::retrieveByPk($this->getRequestParameter('md4_id'));
    $this->forward404Unless($this->mlm_md4_account);
  }

  public function executeCreate()
  {
    $this->mlm_md4_account = new MlmMd4Account();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->mlm_md4_account = MlmMd4AccountPeer::retrieveByPk($this->getRequestParameter('md4_id'));
    $this->forward404Unless($this->mlm_md4_account);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('md4_id'))
    {
      $mlm_md4_account = new MlmMd4Account();
    }
    else
    {
      $mlm_md4_account = MlmMd4AccountPeer::retrieveByPk($this->getRequestParameter('md4_id'));
      $this->forward404Unless($mlm_md4_account);
    }

    $mlm_md4_account->setMd4Id($this->getRequestParameter('md4_id'));
    $mlm_md4_account->setDistributorId($this->getRequestParameter('distributor_id'));
    $mlm_md4_account->setPackageId($this->getRequestParameter('package_id'));
    $mlm_md4_account->setMdUserName($this->getRequestParameter('md_user_name'));
    $mlm_md4_account->setInvestorPassword($this->getRequestParameter('investor_password'));
    $mlm_md4_account->setNormalPassword($this->getRequestParameter('normal_password'));
    $mlm_md4_account->setSerialNo($this->getRequestParameter('serial_no'));
    $mlm_md4_account->setStatusCode($this->getRequestParameter('status_code'));
    $mlm_md4_account->setCreatedBy($this->getRequestParameter('created_by'));
    if ($this->getRequestParameter('created_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
      $mlm_md4_account->setCreatedOn("$y-$m-$d");
    }
    $mlm_md4_account->setUpdatedBy($this->getRequestParameter('updated_by'));
    if ($this->getRequestParameter('updated_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
      $mlm_md4_account->setUpdatedOn("$y-$m-$d");
    }

    $mlm_md4_account->save();

    return $this->redirect('zMlmMd4Account/show?md4_id='.$mlm_md4_account->getMd4Id());
  }

  public function executeDelete()
  {
    $mlm_md4_account = MlmMd4AccountPeer::retrieveByPk($this->getRequestParameter('md4_id'));

    $this->forward404Unless($mlm_md4_account);

    $mlm_md4_account->delete();

    return $this->redirect('zMlmMd4Account/list');
  }
}
