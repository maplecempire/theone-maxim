<?php
// auto-generated by sfPropelCrud
// date: 2013/06/18 11:00:47
?>
<?php

/**
 * imeRegistration actions.
 *
 * @package    sf_sandbox
 * @subpackage imeRegistration
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class imeRegistrationActions extends sfActions
{
    public function executeIndex()
    {
        if (Globals::APPLY_IME_VISIBLE == false) {
            return $this->redirect('/member/summary');
        }
        if (Globals::APPLY_IME_ENABLE == false) {
            $this->setFlash('errorMsg', "IME Registration temporary out of service.");
        }
        $distDB = MlmDistributorPeer::retrieveByPk($this->getUser()->getAttribute(Globals::SESSION_DISTID));
        $this->distDB = $distDB;

        $this->ecashBalance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_ECASH);
        $this->epointBalance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_EPOINT);
        $this->cp3Balance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_MAINTENANCE);
        $this->imeCharges = Globals::IME_CHARGES;
    }

    public function executeDoSubmit()
    {
        if (Globals::APPLY_IME_VISIBLE == false) {
            return $this->redirect('/member/summary');
        }
        if (Globals::APPLY_IME_ENABLE == false) {
            $this->setFlash('errorMsg', "IME Registration temporary out of service.");
            return $this->redirect('/imeRegistration/index');
        }
        $this->ecashBalance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_ECASH);
        $this->epointBalance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_EPOINT);
        $this->cp3Balance = $this->getAccountBalance($this->getUser()->getAttribute(Globals::SESSION_DISTID), Globals::ACCOUNT_TYPE_MAINTENANCE);
        
        $payByOption = $this->getRequestParameter('payByOption');
        $cardQty = $this->getRequestParameter('cardQty');
        $accountType = "";
        $accountBalance = 0;
        $debitCardCharges = Globals::IME_CHARGES;
        $subTotal = $cardQty * $debitCardCharges;
        if ($payByOption == "CP1") {
            if ($this->epointBalance < $subTotal) {
                $this->setFlash('errorMsg', $this->getContext()->getI18N()->__("In-sufficient CP1"));
                return $this->redirect('/imeRegistration/index');
            }
            $accountType = Globals::ACCOUNT_TYPE_EPOINT;
            $accountBalance = $this->epointBalance;
        } else if ($payByOption == "CP2") {
            if ($this->ecashBalance < $subTotal) {
                $this->setFlash('errorMsg', $this->getContext()->getI18N()->__("In-sufficient CP2"));
                return $this->redirect('/imeRegistration/index');
            }
            $accountType = Globals::ACCOUNT_TYPE_ECASH;
            $accountBalance = $this->ecashBalance;
        } else {
            if ($this->cp3Balance < $subTotal) {
                $this->setFlash('errorMsg', $this->getContext()->getI18N()->__("In-sufficient CP3"));
                return $this->redirect('/imeRegistration/index');
            }
            $accountType = Globals::ACCOUNT_TYPE_MAINTENANCE;
            $accountBalance = $this->cp3Balance;
        }

        $con = Propel::getConnection(MlmDailyBonusLogPeer::DATABASE_NAME);
        try {
            $con->begin();

            $mlm_account_ledger = new MlmAccountLedger();
            $mlm_account_ledger->setDistId($this->getUser()->getAttribute(Globals::SESSION_DISTID));
            $mlm_account_ledger->setAccountType($accountType);
            $mlm_account_ledger->setTransactionType(Globals::ACCOUNT_LEDGER_ACTION_IME_REGISTRATION);
            $mlm_account_ledger->setRemark("");
            $mlm_account_ledger->setCredit(0);
            $mlm_account_ledger->setDebit($subTotal);
            $mlm_account_ledger->setBalance($accountBalance - $subTotal);
            $mlm_account_ledger->setCreatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $mlm_account_ledger->setUpdatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $mlm_account_ledger->save();

            $this->mirroringAccountLedger($mlm_account_ledger);
            //$this->revalidateAccount($this->getUser()->getAttribute(Globals::SESSION_DISTID), $accountType);

            $ime_registration = new ImeRegistration();
            $ime_registration->setFullName($this->getRequestParameter('fullname'));
            $ime_registration->setFullNameChinese($this->getRequestParameter('fullnameChinese'));
            $ime_registration->setDistributorCode($this->getUser()->getAttribute(Globals::SESSION_DISTCODE));
            $ime_registration->setPassportNumber($this->getRequestParameter('passportNumber'));
            $ime_registration->setNationality($this->getRequestParameter('nationality'));
            $ime_registration->setMobileNo($this->getRequestParameter('contactNumber'));
            $ime_registration->setEmail($this->getRequestParameter('email'));
            $ime_registration->setDistId($this->getUser()->getAttribute(Globals::SESSION_DISTID));
            $ime_registration->setAccountId($mlm_account_ledger->getAccountId());
            $ime_registration->setAccountType($accountType);
            $ime_registration->setQty($cardQty);
            $ime_registration->setSubTotal($subTotal);
            $ime_registration->setStatusCode(Globals::STATUS_PENDING);
            $ime_registration->setCreatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $ime_registration->setUpdatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $ime_registration->save();

            $con->commit();
        } catch (PropelException $e) {
            $con->rollback();
            //throw $e;
        }
        $this->setFlash('successMsg', $this->getContext()->getI18N()->__("IME Registration has been submitted successfully."));

        return $this->redirect('/imeRegistration/index');
    }    

    public function executeUpdate()
    {
        if (!$this->getRequestParameter('ime_id')) {
            $ime_registration = new ImeRegistration();
        }
        else
        {
            $ime_registration = ImeRegistrationPeer::retrieveByPk($this->getRequestParameter('ime_id'));
            $this->forward404Unless($ime_registration);
        }

        $ime_registration->setImeId($this->getRequestParameter('ime_id'));
        $ime_registration->setFullName($this->getRequestParameter('full_name'));
        $ime_registration->setFullNameChinese($this->getRequestParameter('full_name_chinese'));
        $ime_registration->setDistributorCode($this->getRequestParameter('distributor_code'));
        $ime_registration->setPassportNumber($this->getRequestParameter('passport_number'));
        $ime_registration->setNationality($this->getRequestParameter('nationality'));
        $ime_registration->setMobileNo($this->getRequestParameter('mobile_no'));
        $ime_registration->setEmail($this->getRequestParameter('email'));
        $ime_registration->setDistId($this->getRequestParameter('dist_id'));
        $ime_registration->setAccountId($this->getRequestParameter('account_id'));
        $ime_registration->setAccountType($this->getRequestParameter('account_type'));
        $ime_registration->setQty($this->getRequestParameter('qty'));
        $ime_registration->setSubTotal($this->getRequestParameter('sub_total'));
        $ime_registration->setStatusCode($this->getRequestParameter('status_code'));
        $ime_registration->setCreatedBy($this->getRequestParameter('created_by'));
        if ($this->getRequestParameter('created_on')) {
            list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
            $ime_registration->setCreatedOn("$y-$m-$d");
        }
        $ime_registration->setUpdatedBy($this->getRequestParameter('updated_by'));
        if ($this->getRequestParameter('updated_on')) {
            list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
            $ime_registration->setUpdatedOn("$y-$m-$d");
        }

        $ime_registration->save();

        return $this->redirect('imeRegistration/show?ime_id=' . $ime_registration->getImeId());
    }

    public function executeDelete()
    {
        $ime_registration = ImeRegistrationPeer::retrieveByPk($this->getRequestParameter('ime_id'));

        $this->forward404Unless($ime_registration);

        $ime_registration->delete();

        return $this->redirect('imeRegistration/list');
    }

    function getAccountBalance($distributorId, $accountType)
    {
        $query = "SELECT SUM(credit-debit) AS SUB_TOTAL FROM mlm_account_ledger WHERE dist_id = " . $distributorId . " AND account_type = '" . $accountType . "'";

        $connection = Propel::getConnection();
        $statement = $connection->prepareStatement($query);
        $resultset = $statement->executeQuery();

        if ($resultset->next()) {
            $arr = $resultset->getRow();
            if ($arr["SUB_TOTAL"] != null) {
                return $arr["SUB_TOTAL"];
            } else {
                return 0;
            }
        }
        return 0;
    }

    function mirroringAccountLedger($mlmAccountLedger)
    {
        $log_account_ledger = new LogAccountLedger();
        $log_account_ledger->setAccountId($mlmAccountLedger->getAccountId());
        $log_account_ledger->setAccessIp($this->getRequest()->getHttpHeader('addr','remote'));
        $log_account_ledger->setDistId($mlmAccountLedger->getDistId());
        $log_account_ledger->setAccountType($mlmAccountLedger->getAccountType());
        $log_account_ledger->setTransactionType($mlmAccountLedger->getTransactionType());
        $log_account_ledger->setRemark($mlmAccountLedger->getRemark());
        $log_account_ledger->setInternalRemark($mlmAccountLedger->getInternalRemark());
        $log_account_ledger->setCredit($mlmAccountLedger->getCredit());
        $log_account_ledger->setDebit($mlmAccountLedger->getDebit());
        $log_account_ledger->setBalance($mlmAccountLedger->getBalance());
        $log_account_ledger->setCreatedBy($mlmAccountLedger->getCreatedBy());
        $log_account_ledger->setUpdatedBy($mlmAccountLedger->getUpdatedBy());
        $log_account_ledger->save();
    }
}
