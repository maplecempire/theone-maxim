<?php
// auto-generated by sfPropelCrud
// date: 2013/07/13 09:24:04
?>
<?php

/**
 * zImeReport actions.
 *
 * @package    sf_sandbox
 * @subpackage zImeReport
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class zImeReportActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('zImeReport', 'list');
  }

  public function executeList()
  {
    $this->ime_reports = ImeReportPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->ime_report = ImeReportPeer::retrieveByPk($this->getRequestParameter('report_id'));
    $this->forward404Unless($this->ime_report);
  }

  public function executeCreate()
  {
    $this->ime_report = new ImeReport();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->ime_report = ImeReportPeer::retrieveByPk($this->getRequestParameter('report_id'));
    $this->forward404Unless($this->ime_report);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('report_id'))
    {
      $ime_report = new ImeReport();
    }
    else
    {
      $ime_report = ImeReportPeer::retrieveByPk($this->getRequestParameter('report_id'));
      $this->forward404Unless($ime_report);
    }

    $ime_report->setReportId($this->getRequestParameter('report_id'));
    $ime_report->setDistId($this->getRequestParameter('dist_id'));
    $ime_report->setBonusType($this->getRequestParameter('bonus_type'));
    $ime_report->setSmallLeg($this->getRequestParameter('small_leg'));
    $ime_report->setPersonalSales($this->getRequestParameter('personal_sales'));
    $ime_report->setTicketQty($this->getRequestParameter('ticket_qty'));
    $ime_report->setDistributorCode($this->getRequestParameter('distributor_code'));
    $ime_report->setFullName($this->getRequestParameter('full_name'));
    $ime_report->setEmail($this->getRequestParameter('email'));
    $ime_report->setContact($this->getRequestParameter('contact'));
    $ime_report->setCountry($this->getRequestParameter('country'));
    if ($this->getRequestParameter('registered_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('registered_on'), $this->getUser()->getCulture());
      $ime_report->setRegisteredOn("$y-$m-$d");
    }
    $ime_report->setLeader($this->getRequestParameter('leader'));
    $ime_report->setRemark($this->getRequestParameter('remark'));
    $ime_report->setCreatedBy($this->getRequestParameter('created_by'));
    if ($this->getRequestParameter('created_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
      $ime_report->setCreatedOn("$y-$m-$d");
    }
    $ime_report->setUpdatedBy($this->getRequestParameter('updated_by'));
    if ($this->getRequestParameter('updated_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
      $ime_report->setUpdatedOn("$y-$m-$d");
    }

    $ime_report->save();

    return $this->redirect('zImeReport/show?report_id='.$ime_report->getReportId());
  }

  public function executeDelete()
  {
    $ime_report = ImeReportPeer::retrieveByPk($this->getRequestParameter('report_id'));

    $this->forward404Unless($ime_report);

    $ime_report->delete();

    return $this->redirect('zImeReport/list');
  }
}
