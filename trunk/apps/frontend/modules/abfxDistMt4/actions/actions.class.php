<?php
// auto-generated by sfPropelCrud
// date: 2013/08/10 00:16:00
?>
<?php

/**
 * abfxDistMt4 actions.
 *
 * @package    sf_sandbox
 * @subpackage abfxDistMt4
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class abfxDistMt4Actions extends sfActions
{
    public function executeAttachMt4ToDist()
    {
        $c = new Criteria();
        $c->add(AbfxDistMt4Peer::STATUS_CODE, "PENDING");
        $abfxDistMt4s = AbfxDistMt4Peer::doSelect($c);

        foreach ($abfxDistMt4s as $abfxDistMt4) {
            $tbl_distributor = MlmDistributorPeer::retrieveByPK($abfxDistMt4->getDistId());

            $mlm_dist_mt4 = new MlmDistMt4();
            $mlm_dist_mt4->setDistId($tbl_distributor->getDistributorId());
            $mlm_dist_mt4->setRankId($tbl_distributor->getRankId());
            $mlm_dist_mt4->setMt4UserName($abfxDistMt4->getMt4UserName());
            $mlm_dist_mt4->setMt4Password($abfxDistMt4->getMt4Password());
            $mlm_dist_mt4->setCreatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $mlm_dist_mt4->setUpdatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $mlm_dist_mt4->save();

            $abfxDistMt4->setStatusCode("COMPLETE");
            $abfxDistMt4->save();
        }

        echo "Done.";
        return sfView::HEADER_ONLY;
    }
    public function executeIndex()
    {
//        $fileName = "Summary_Report2.xls";
//        $fileName = "MAM1.xls";
//        $fileName = "MAM2.xls";
//        $fileName = "MAM3.xls";
//        $fileName = "MAM5.xls";
        $fileName = "Summary_Report.xls";

        $physicalDirectory = sfConfig::get('sf_upload_dir') . DIRECTORY_SEPARATOR . "abfx" . DIRECTORY_SEPARATOR . $fileName;

        error_reporting(E_ALL ^ E_NOTICE);
        require_once 'excel_reader2.php';
        $data = new Spreadsheet_Excel_Reader($physicalDirectory);

        $totalRow = $data->rowcount($sheet_index = 0);
        for ($x = $totalRow; $x > 1; $x--) {
            $distId = 0;
            $statusCode = "ERROR";

            $distCode = $data->val($x, "D");

            if ($distCode != "") {
                $c = new Criteria();
                $c->add(MlmDistributorPeer::DISTRIBUTOR_CODE, $distCode);
                $mlmDistributor = MlmDistributorPeer::doSelectOne($c);

                if ($mlmDistributor) {
                    $distId = $mlmDistributor->getDistributorId();
                    $statusCode = "PENDING";
                }
            }

            $email = $data->val($x, "E");
            $fullName = $data->val($x, "C");
            $mt4UserName = $data->val($x, "A");
            $mt4Password = $data->val($x, "B");

            $abfx_dist_mt4 = new AbfxDistMt4();
            $abfx_dist_mt4->setDistId($distId);
            $abfx_dist_mt4->setDistCode($distCode);
            $abfx_dist_mt4->setEmail($email);
            $abfx_dist_mt4->setFullName($fullName);
            $abfx_dist_mt4->setMt4UserName($mt4UserName);
            $abfx_dist_mt4->setMt4Password($mt4Password);
            $abfx_dist_mt4->setFileName($fileName);
            $abfx_dist_mt4->setStatusCode($statusCode);
            $abfx_dist_mt4->setCreatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $abfx_dist_mt4->setUpdatedBy($this->getUser()->getAttribute(Globals::SESSION_USERID, Globals::SYSTEM_USER_ID));
            $abfx_dist_mt4->save();
        }

        echo $fileName."<br>";
        echo "Done.";
        return sfView::HEADER_ONLY;
    }

    public function executeList()
    {
        $this->abfx_dist_mt4s = AbfxDistMt4Peer::doSelect(new Criteria());
    }

    public function executeShow()
    {
        $this->abfx_dist_mt4 = AbfxDistMt4Peer::retrieveByPk($this->getRequestParameter('abfx_id'));
        $this->forward404Unless($this->abfx_dist_mt4);
    }

    public function executeCreate()
    {
        $this->abfx_dist_mt4 = new AbfxDistMt4();

        $this->setTemplate('edit');
    }

    public function executeEdit()
    {
        $this->abfx_dist_mt4 = AbfxDistMt4Peer::retrieveByPk($this->getRequestParameter('abfx_id'));
        $this->forward404Unless($this->abfx_dist_mt4);
    }

    public function executeUpdate()
    {
        if (!$this->getRequestParameter('abfx_id')) {
            $abfx_dist_mt4 = new AbfxDistMt4();
        }
        else
        {
            $abfx_dist_mt4 = AbfxDistMt4Peer::retrieveByPk($this->getRequestParameter('abfx_id'));
            $this->forward404Unless($abfx_dist_mt4);
        }

        $abfx_dist_mt4->setAbfxId($this->getRequestParameter('abfx_id'));
        $abfx_dist_mt4->setDistId($this->getRequestParameter('dist_id'));
        $abfx_dist_mt4->setDistCode($this->getRequestParameter('dist_code'));
        $abfx_dist_mt4->setEmail($this->getRequestParameter('email'));
        $abfx_dist_mt4->setFullName($this->getRequestParameter('full_name'));
        $abfx_dist_mt4->setMt4UserName($this->getRequestParameter('mt4_user_name'));
        $abfx_dist_mt4->setMt4Password($this->getRequestParameter('mt4_password'));
        $abfx_dist_mt4->setFileName($this->getRequestParameter('file_name'));
        $abfx_dist_mt4->setStatusCode($this->getRequestParameter('status_code'));
        $abfx_dist_mt4->setCreatedBy($this->getRequestParameter('created_by'));
        if ($this->getRequestParameter('created_on')) {
            list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
            $abfx_dist_mt4->setCreatedOn("$y-$m-$d");
        }
        $abfx_dist_mt4->setUpdatedBy($this->getRequestParameter('updated_by'));
        if ($this->getRequestParameter('updated_on')) {
            list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
            $abfx_dist_mt4->setUpdatedOn("$y-$m-$d");
        }

        $abfx_dist_mt4->save();

        return $this->redirect('abfxDistMt4/show?abfx_id=' . $abfx_dist_mt4->getAbfxId());
    }

    public function executeDelete()
    {
        $abfx_dist_mt4 = AbfxDistMt4Peer::retrieveByPk($this->getRequestParameter('abfx_id'));

        $this->forward404Unless($abfx_dist_mt4);

        $abfx_dist_mt4->delete();

        return $this->redirect('abfxDistMt4/list');
    }
}
