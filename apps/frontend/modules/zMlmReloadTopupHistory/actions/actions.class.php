<?php
// auto-generated by sfPropelCrud
// date: 2012/05/19 22:37:17
?>
<?php

/**
 * zMlmReloadTopupHistory actions.
 *
 * @package    sf_sandbox
 * @subpackage zMlmReloadTopupHistory
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class zMlmReloadTopupHistoryActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('zMlmReloadTopupHistory', 'list');
  }

  public function executeList()
  {
    $this->mlm_reload_topup_historys = MlmReloadTopupHistoryPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->mlm_reload_topup_history = MlmReloadTopupHistoryPeer::retrieveByPk($this->getRequestParameter('reload_id'));
    $this->forward404Unless($this->mlm_reload_topup_history);
  }

  public function executeCreate()
  {
    $this->mlm_reload_topup_history = new MlmReloadTopupHistory();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->mlm_reload_topup_history = MlmReloadTopupHistoryPeer::retrieveByPk($this->getRequestParameter('reload_id'));
    $this->forward404Unless($this->mlm_reload_topup_history);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('reload_id'))
    {
      $mlm_reload_topup_history = new MlmReloadTopupHistory();
    }
    else
    {
      $mlm_reload_topup_history = MlmReloadTopupHistoryPeer::retrieveByPk($this->getRequestParameter('reload_id'));
      $this->forward404Unless($mlm_reload_topup_history);
    }

    $mlm_reload_topup_history->setReloadId($this->getRequestParameter('reload_id'));
    $mlm_reload_topup_history->setDistId($this->getRequestParameter('dist_id'));
    $mlm_reload_topup_history->setTransactionCode($this->getRequestParameter('transaction_code'));
    $mlm_reload_topup_history->setBalance($this->getRequestParameter('balance'));
    $mlm_reload_topup_history->setStatusCode($this->getRequestParameter('status_code'));
    $mlm_reload_topup_history->setRemarks($this->getRequestParameter('remarks'));
    $mlm_reload_topup_history->setCreatedBy($this->getRequestParameter('created_by'));
    if ($this->getRequestParameter('created_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
      $mlm_reload_topup_history->setCreatedOn("$y-$m-$d");
    }
    $mlm_reload_topup_history->setUpdatedBy($this->getRequestParameter('updated_by'));
    if ($this->getRequestParameter('updated_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
      $mlm_reload_topup_history->setUpdatedOn("$y-$m-$d");
    }

    $mlm_reload_topup_history->save();

    return $this->redirect('zMlmReloadTopupHistory/show?reload_id='.$mlm_reload_topup_history->getReloadId());
  }

  public function executeDelete()
  {
    $mlm_reload_topup_history = MlmReloadTopupHistoryPeer::retrieveByPk($this->getRequestParameter('reload_id'));

    $this->forward404Unless($mlm_reload_topup_history);

    $mlm_reload_topup_history->delete();

    return $this->redirect('zMlmReloadTopupHistory/list');
  }
}
