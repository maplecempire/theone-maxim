<?php
// auto-generated by sfPropelCrud
// date: 2012/05/19 22:40:08
?>
<?php

/**
 * zMlmEcreditPurchase actions.
 *
 * @package    sf_sandbox
 * @subpackage zMlmEcreditPurchase
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class zMlmEcreditPurchaseActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('zMlmEcreditPurchase', 'list');
  }

  public function executeList()
  {
    $this->mlm_ecredit_purchases = MlmEcreditPurchasePeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
    $this->mlm_ecredit_purchase = MlmEcreditPurchasePeer::retrieveByPk($this->getRequestParameter('ecredit_id'));
    $this->forward404Unless($this->mlm_ecredit_purchase);
  }

  public function executeCreate()
  {
    $this->mlm_ecredit_purchase = new MlmEcreditPurchase();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->mlm_ecredit_purchase = MlmEcreditPurchasePeer::retrieveByPk($this->getRequestParameter('ecredit_id'));
    $this->forward404Unless($this->mlm_ecredit_purchase);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('ecredit_id'))
    {
      $mlm_ecredit_purchase = new MlmEcreditPurchase();
    }
    else
    {
      $mlm_ecredit_purchase = MlmEcreditPurchasePeer::retrieveByPk($this->getRequestParameter('ecredit_id'));
      $this->forward404Unless($mlm_ecredit_purchase);
    }

    $mlm_ecredit_purchase->setEcreditId($this->getRequestParameter('ecredit_id'));
    $mlm_ecredit_purchase->setDistId($this->getRequestParameter('dist_id'));
    $mlm_ecredit_purchase->setBalance($this->getRequestParameter('balance'));
    $mlm_ecredit_purchase->setStatusCode($this->getRequestParameter('status_code'));
    $mlm_ecredit_purchase->setRemarks($this->getRequestParameter('remarks'));
    if ($this->getRequestParameter('approve_reject_datetime'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('approve_reject_datetime'), $this->getUser()->getCulture());
      $mlm_ecredit_purchase->setApproveRejectDatetime("$y-$m-$d");
    }
    $mlm_ecredit_purchase->setApprovedByUserid($this->getRequestParameter('approved_by_userid'));
    $mlm_ecredit_purchase->setCreatedBy($this->getRequestParameter('created_by'));
    if ($this->getRequestParameter('created_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('created_on'), $this->getUser()->getCulture());
      $mlm_ecredit_purchase->setCreatedOn("$y-$m-$d");
    }
    $mlm_ecredit_purchase->setUpdatedBy($this->getRequestParameter('updated_by'));
    if ($this->getRequestParameter('updated_on'))
    {
      list($d, $m, $y) = sfI18N::getDateForCulture($this->getRequestParameter('updated_on'), $this->getUser()->getCulture());
      $mlm_ecredit_purchase->setUpdatedOn("$y-$m-$d");
    }

    $mlm_ecredit_purchase->save();

    return $this->redirect('zMlmEcreditPurchase/show?ecredit_id='.$mlm_ecredit_purchase->getEcreditId());
  }

  public function executeDelete()
  {
    $mlm_ecredit_purchase = MlmEcreditPurchasePeer::retrieveByPk($this->getRequestParameter('ecredit_id'));

    $this->forward404Unless($mlm_ecredit_purchase);

    $mlm_ecredit_purchase->delete();

    return $this->redirect('zMlmEcreditPurchase/list');
  }
}
